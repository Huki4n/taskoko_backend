// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject/ent/project"
	"awesomeProject/ent/projectcolumn"
	"fmt"
	"strings"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// ProjectColumn is the model entity for the ProjectColumn schema.
type ProjectColumn struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Color holds the value of the "color" field.
	Color string `json:"color,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the ProjectColumnQuery when eager-loading is set.
	Edges           ProjectColumnEdges `json:"edges"`
	project_columns *int
	selectValues    sql.SelectValues
}

// ProjectColumnEdges holds the relations/edges for other nodes in the graph.
type ProjectColumnEdges struct {
	// Tasks holds the value of the tasks edge.
	Tasks []*Task `json:"tasks,omitempty"`
	// Project holds the value of the project edge.
	Project *Project `json:"project,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [2]bool
}

// TasksOrErr returns the Tasks value or an error if the edge
// was not loaded in eager-loading.
func (e ProjectColumnEdges) TasksOrErr() ([]*Task, error) {
	if e.loadedTypes[0] {
		return e.Tasks, nil
	}
	return nil, &NotLoadedError{edge: "tasks"}
}

// ProjectOrErr returns the Project value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e ProjectColumnEdges) ProjectOrErr() (*Project, error) {
	if e.Project != nil {
		return e.Project, nil
	} else if e.loadedTypes[1] {
		return nil, &NotFoundError{label: project.Label}
	}
	return nil, &NotLoadedError{edge: "project"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*ProjectColumn) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case projectcolumn.FieldID, projectcolumn.FieldOrder:
			values[i] = new(sql.NullInt64)
		case projectcolumn.FieldName, projectcolumn.FieldColor:
			values[i] = new(sql.NullString)
		case projectcolumn.ForeignKeys[0]: // project_columns
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the ProjectColumn fields.
func (pc *ProjectColumn) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case projectcolumn.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pc.ID = int(value.Int64)
		case projectcolumn.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				pc.Name = value.String
			}
		case projectcolumn.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				pc.Order = int(value.Int64)
			}
		case projectcolumn.FieldColor:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field color", values[i])
			} else if value.Valid {
				pc.Color = value.String
			}
		case projectcolumn.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_columns", value)
			} else if value.Valid {
				pc.project_columns = new(int)
				*pc.project_columns = int(value.Int64)
			}
		default:
			pc.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the ProjectColumn.
// This includes values selected through modifiers, order, etc.
func (pc *ProjectColumn) Value(name string) (ent.Value, error) {
	return pc.selectValues.Get(name)
}

// QueryTasks queries the "tasks" edge of the ProjectColumn entity.
func (pc *ProjectColumn) QueryTasks() *TaskQuery {
	return NewProjectColumnClient(pc.config).QueryTasks(pc)
}

// QueryProject queries the "project" edge of the ProjectColumn entity.
func (pc *ProjectColumn) QueryProject() *ProjectQuery {
	return NewProjectColumnClient(pc.config).QueryProject(pc)
}

// Update returns a builder for updating this ProjectColumn.
// Note that you need to call ProjectColumn.Unwrap() before calling this method if this ProjectColumn
// was returned from a transaction, and the transaction was committed or rolled back.
func (pc *ProjectColumn) Update() *ProjectColumnUpdateOne {
	return NewProjectColumnClient(pc.config).UpdateOne(pc)
}

// Unwrap unwraps the ProjectColumn entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pc *ProjectColumn) Unwrap() *ProjectColumn {
	_tx, ok := pc.config.driver.(*txDriver)
	if !ok {
		panic("ent: ProjectColumn is not a transactional entity")
	}
	pc.config.driver = _tx.drv
	return pc
}

// String implements the fmt.Stringer.
func (pc *ProjectColumn) String() string {
	var builder strings.Builder
	builder.WriteString("ProjectColumn(")
	builder.WriteString(fmt.Sprintf("id=%v, ", pc.ID))
	builder.WriteString("name=")
	builder.WriteString(pc.Name)
	builder.WriteString(", ")
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", pc.Order))
	builder.WriteString(", ")
	builder.WriteString("color=")
	builder.WriteString(pc.Color)
	builder.WriteByte(')')
	return builder.String()
}

// ProjectColumns is a parsable slice of ProjectColumn.
type ProjectColumns []*ProjectColumn
