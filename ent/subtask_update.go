// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject/ent/predicate"
	"awesomeProject/ent/subtask"
	"awesomeProject/ent/task"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// SubtaskUpdate is the builder for updating Subtask entities.
type SubtaskUpdate struct {
	config
	hooks    []Hook
	mutation *SubtaskMutation
}

// Where appends a list predicates to the SubtaskUpdate builder.
func (su *SubtaskUpdate) Where(ps ...predicate.Subtask) *SubtaskUpdate {
	su.mutation.Where(ps...)
	return su
}

// SetTitle sets the "title" field.
func (su *SubtaskUpdate) SetTitle(s string) *SubtaskUpdate {
	su.mutation.SetTitle(s)
	return su
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (su *SubtaskUpdate) SetNillableTitle(s *string) *SubtaskUpdate {
	if s != nil {
		su.SetTitle(*s)
	}
	return su
}

// SetDescription sets the "description" field.
func (su *SubtaskUpdate) SetDescription(s string) *SubtaskUpdate {
	su.mutation.SetDescription(s)
	return su
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (su *SubtaskUpdate) SetNillableDescription(s *string) *SubtaskUpdate {
	if s != nil {
		su.SetDescription(*s)
	}
	return su
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (su *SubtaskUpdate) SetTaskID(id int) *SubtaskUpdate {
	su.mutation.SetTaskID(id)
	return su
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (su *SubtaskUpdate) SetNillableTaskID(id *int) *SubtaskUpdate {
	if id != nil {
		su = su.SetTaskID(*id)
	}
	return su
}

// SetTask sets the "task" edge to the Task entity.
func (su *SubtaskUpdate) SetTask(t *Task) *SubtaskUpdate {
	return su.SetTaskID(t.ID)
}

// Mutation returns the SubtaskMutation object of the builder.
func (su *SubtaskUpdate) Mutation() *SubtaskMutation {
	return su.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (su *SubtaskUpdate) ClearTask() *SubtaskUpdate {
	su.mutation.ClearTask()
	return su
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (su *SubtaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, su.sqlSave, su.mutation, su.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (su *SubtaskUpdate) SaveX(ctx context.Context) int {
	affected, err := su.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (su *SubtaskUpdate) Exec(ctx context.Context) error {
	_, err := su.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (su *SubtaskUpdate) ExecX(ctx context.Context) {
	if err := su.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (su *SubtaskUpdate) check() error {
	if v, ok := su.mutation.Description(); ok {
		if err := subtask.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Subtask.description": %w`, err)}
		}
	}
	return nil
}

func (su *SubtaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := su.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(subtask.Table, subtask.Columns, sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt))
	if ps := su.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := su.mutation.Title(); ok {
		_spec.SetField(subtask.FieldTitle, field.TypeString, value)
	}
	if value, ok := su.mutation.Description(); ok {
		_spec.SetField(subtask.FieldDescription, field.TypeString, value)
	}
	if su.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := su.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, su.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	su.mutation.done = true
	return n, nil
}

// SubtaskUpdateOne is the builder for updating a single Subtask entity.
type SubtaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *SubtaskMutation
}

// SetTitle sets the "title" field.
func (suo *SubtaskUpdateOne) SetTitle(s string) *SubtaskUpdateOne {
	suo.mutation.SetTitle(s)
	return suo
}

// SetNillableTitle sets the "title" field if the given value is not nil.
func (suo *SubtaskUpdateOne) SetNillableTitle(s *string) *SubtaskUpdateOne {
	if s != nil {
		suo.SetTitle(*s)
	}
	return suo
}

// SetDescription sets the "description" field.
func (suo *SubtaskUpdateOne) SetDescription(s string) *SubtaskUpdateOne {
	suo.mutation.SetDescription(s)
	return suo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (suo *SubtaskUpdateOne) SetNillableDescription(s *string) *SubtaskUpdateOne {
	if s != nil {
		suo.SetDescription(*s)
	}
	return suo
}

// SetTaskID sets the "task" edge to the Task entity by ID.
func (suo *SubtaskUpdateOne) SetTaskID(id int) *SubtaskUpdateOne {
	suo.mutation.SetTaskID(id)
	return suo
}

// SetNillableTaskID sets the "task" edge to the Task entity by ID if the given value is not nil.
func (suo *SubtaskUpdateOne) SetNillableTaskID(id *int) *SubtaskUpdateOne {
	if id != nil {
		suo = suo.SetTaskID(*id)
	}
	return suo
}

// SetTask sets the "task" edge to the Task entity.
func (suo *SubtaskUpdateOne) SetTask(t *Task) *SubtaskUpdateOne {
	return suo.SetTaskID(t.ID)
}

// Mutation returns the SubtaskMutation object of the builder.
func (suo *SubtaskUpdateOne) Mutation() *SubtaskMutation {
	return suo.mutation
}

// ClearTask clears the "task" edge to the Task entity.
func (suo *SubtaskUpdateOne) ClearTask() *SubtaskUpdateOne {
	suo.mutation.ClearTask()
	return suo
}

// Where appends a list predicates to the SubtaskUpdate builder.
func (suo *SubtaskUpdateOne) Where(ps ...predicate.Subtask) *SubtaskUpdateOne {
	suo.mutation.Where(ps...)
	return suo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (suo *SubtaskUpdateOne) Select(field string, fields ...string) *SubtaskUpdateOne {
	suo.fields = append([]string{field}, fields...)
	return suo
}

// Save executes the query and returns the updated Subtask entity.
func (suo *SubtaskUpdateOne) Save(ctx context.Context) (*Subtask, error) {
	return withHooks(ctx, suo.sqlSave, suo.mutation, suo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (suo *SubtaskUpdateOne) SaveX(ctx context.Context) *Subtask {
	node, err := suo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (suo *SubtaskUpdateOne) Exec(ctx context.Context) error {
	_, err := suo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (suo *SubtaskUpdateOne) ExecX(ctx context.Context) {
	if err := suo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (suo *SubtaskUpdateOne) check() error {
	if v, ok := suo.mutation.Description(); ok {
		if err := subtask.DescriptionValidator(v); err != nil {
			return &ValidationError{Name: "description", err: fmt.Errorf(`ent: validator failed for field "Subtask.description": %w`, err)}
		}
	}
	return nil
}

func (suo *SubtaskUpdateOne) sqlSave(ctx context.Context) (_node *Subtask, err error) {
	if err := suo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(subtask.Table, subtask.Columns, sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt))
	id, ok := suo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Subtask.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := suo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, subtask.FieldID)
		for _, f := range fields {
			if !subtask.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != subtask.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := suo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := suo.mutation.Title(); ok {
		_spec.SetField(subtask.FieldTitle, field.TypeString, value)
	}
	if value, ok := suo.mutation.Description(); ok {
		_spec.SetField(subtask.FieldDescription, field.TypeString, value)
	}
	if suo.mutation.TaskCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := suo.mutation.TaskIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   subtask.TaskTable,
			Columns: []string{subtask.TaskColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Subtask{config: suo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, suo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{subtask.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	suo.mutation.done = true
	return _node, nil
}
