// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject/ent/projectcolumn"
	"awesomeProject/ent/task"
	"encoding/json"
	"fmt"
	"strings"
	"time"

	"entgo.io/ent"
	"entgo.io/ent/dialect/sql"
)

// Task is the model entity for the Task schema.
type Task struct {
	config `json:"-"`
	// ID of the ent.
	ID int `json:"id,omitempty"`
	// Order holds the value of the "order" field.
	Order int `json:"order,omitempty"`
	// Type holds the value of the "type" field.
	Type string `json:"type,omitempty"`
	// Name holds the value of the "name" field.
	Name string `json:"name,omitempty"`
	// Description holds the value of the "description" field.
	Description string `json:"description,omitempty"`
	// Tags holds the value of the "tags" field.
	Tags []string `json:"tags,omitempty"`
	// Timer holds the value of the "timer" field.
	Timer time.Time `json:"timer,omitempty"`
	// Image holds the value of the "image" field.
	Image string `json:"image,omitempty"`
	// IsDone holds the value of the "isDone" field.
	IsDone bool `json:"isDone,omitempty"`
	// Edges holds the relations/edges for other nodes in the graph.
	// The values are being populated by the TaskQuery when eager-loading is set.
	Edges                TaskEdges `json:"edges"`
	project_column_tasks *int
	selectValues         sql.SelectValues
}

// TaskEdges holds the relations/edges for other nodes in the graph.
type TaskEdges struct {
	// Subtasks holds the value of the subtasks edge.
	Subtasks []*Subtask `json:"subtasks,omitempty"`
	// Comments holds the value of the comments edge.
	Comments []*Comment `json:"comments,omitempty"`
	// Attachments holds the value of the attachments edge.
	Attachments []*Attachment `json:"attachments,omitempty"`
	// Column holds the value of the column edge.
	Column *ProjectColumn `json:"column,omitempty"`
	// Users holds the value of the users edge.
	Users []*User `json:"users,omitempty"`
	// loadedTypes holds the information for reporting if a
	// type was loaded (or requested) in eager-loading or not.
	loadedTypes [5]bool
}

// SubtasksOrErr returns the Subtasks value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) SubtasksOrErr() ([]*Subtask, error) {
	if e.loadedTypes[0] {
		return e.Subtasks, nil
	}
	return nil, &NotLoadedError{edge: "subtasks"}
}

// CommentsOrErr returns the Comments value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) CommentsOrErr() ([]*Comment, error) {
	if e.loadedTypes[1] {
		return e.Comments, nil
	}
	return nil, &NotLoadedError{edge: "comments"}
}

// AttachmentsOrErr returns the Attachments value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) AttachmentsOrErr() ([]*Attachment, error) {
	if e.loadedTypes[2] {
		return e.Attachments, nil
	}
	return nil, &NotLoadedError{edge: "attachments"}
}

// ColumnOrErr returns the Column value or an error if the edge
// was not loaded in eager-loading, or loaded but was not found.
func (e TaskEdges) ColumnOrErr() (*ProjectColumn, error) {
	if e.Column != nil {
		return e.Column, nil
	} else if e.loadedTypes[3] {
		return nil, &NotFoundError{label: projectcolumn.Label}
	}
	return nil, &NotLoadedError{edge: "column"}
}

// UsersOrErr returns the Users value or an error if the edge
// was not loaded in eager-loading.
func (e TaskEdges) UsersOrErr() ([]*User, error) {
	if e.loadedTypes[4] {
		return e.Users, nil
	}
	return nil, &NotLoadedError{edge: "users"}
}

// scanValues returns the types for scanning values from sql.Rows.
func (*Task) scanValues(columns []string) ([]any, error) {
	values := make([]any, len(columns))
	for i := range columns {
		switch columns[i] {
		case task.FieldTags:
			values[i] = new([]byte)
		case task.FieldIsDone:
			values[i] = new(sql.NullBool)
		case task.FieldID, task.FieldOrder:
			values[i] = new(sql.NullInt64)
		case task.FieldType, task.FieldName, task.FieldDescription, task.FieldImage:
			values[i] = new(sql.NullString)
		case task.FieldTimer:
			values[i] = new(sql.NullTime)
		case task.ForeignKeys[0]: // project_column_tasks
			values[i] = new(sql.NullInt64)
		default:
			values[i] = new(sql.UnknownType)
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the Task fields.
func (t *Task) assignValues(columns []string, values []any) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case task.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			t.ID = int(value.Int64)
		case task.FieldOrder:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field order", values[i])
			} else if value.Valid {
				t.Order = int(value.Int64)
			}
		case task.FieldType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field type", values[i])
			} else if value.Valid {
				t.Type = value.String
			}
		case task.FieldName:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field name", values[i])
			} else if value.Valid {
				t.Name = value.String
			}
		case task.FieldDescription:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field description", values[i])
			} else if value.Valid {
				t.Description = value.String
			}
		case task.FieldTags:
			if value, ok := values[i].(*[]byte); !ok {
				return fmt.Errorf("unexpected type %T for field tags", values[i])
			} else if value != nil && len(*value) > 0 {
				if err := json.Unmarshal(*value, &t.Tags); err != nil {
					return fmt.Errorf("unmarshal field tags: %w", err)
				}
			}
		case task.FieldTimer:
			if value, ok := values[i].(*sql.NullTime); !ok {
				return fmt.Errorf("unexpected type %T for field timer", values[i])
			} else if value.Valid {
				t.Timer = value.Time
			}
		case task.FieldImage:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field image", values[i])
			} else if value.Valid {
				t.Image = value.String
			}
		case task.FieldIsDone:
			if value, ok := values[i].(*sql.NullBool); !ok {
				return fmt.Errorf("unexpected type %T for field isDone", values[i])
			} else if value.Valid {
				t.IsDone = value.Bool
			}
		case task.ForeignKeys[0]:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for edge-field project_column_tasks", value)
			} else if value.Valid {
				t.project_column_tasks = new(int)
				*t.project_column_tasks = int(value.Int64)
			}
		default:
			t.selectValues.Set(columns[i], values[i])
		}
	}
	return nil
}

// Value returns the ent.Value that was dynamically selected and assigned to the Task.
// This includes values selected through modifiers, order, etc.
func (t *Task) Value(name string) (ent.Value, error) {
	return t.selectValues.Get(name)
}

// QuerySubtasks queries the "subtasks" edge of the Task entity.
func (t *Task) QuerySubtasks() *SubtaskQuery {
	return NewTaskClient(t.config).QuerySubtasks(t)
}

// QueryComments queries the "comments" edge of the Task entity.
func (t *Task) QueryComments() *CommentQuery {
	return NewTaskClient(t.config).QueryComments(t)
}

// QueryAttachments queries the "attachments" edge of the Task entity.
func (t *Task) QueryAttachments() *AttachmentQuery {
	return NewTaskClient(t.config).QueryAttachments(t)
}

// QueryColumn queries the "column" edge of the Task entity.
func (t *Task) QueryColumn() *ProjectColumnQuery {
	return NewTaskClient(t.config).QueryColumn(t)
}

// QueryUsers queries the "users" edge of the Task entity.
func (t *Task) QueryUsers() *UserQuery {
	return NewTaskClient(t.config).QueryUsers(t)
}

// Update returns a builder for updating this Task.
// Note that you need to call Task.Unwrap() before calling this method if this Task
// was returned from a transaction, and the transaction was committed or rolled back.
func (t *Task) Update() *TaskUpdateOne {
	return NewTaskClient(t.config).UpdateOne(t)
}

// Unwrap unwraps the Task entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (t *Task) Unwrap() *Task {
	_tx, ok := t.config.driver.(*txDriver)
	if !ok {
		panic("ent: Task is not a transactional entity")
	}
	t.config.driver = _tx.drv
	return t
}

// String implements the fmt.Stringer.
func (t *Task) String() string {
	var builder strings.Builder
	builder.WriteString("Task(")
	builder.WriteString(fmt.Sprintf("id=%v, ", t.ID))
	builder.WriteString("order=")
	builder.WriteString(fmt.Sprintf("%v", t.Order))
	builder.WriteString(", ")
	builder.WriteString("type=")
	builder.WriteString(t.Type)
	builder.WriteString(", ")
	builder.WriteString("name=")
	builder.WriteString(t.Name)
	builder.WriteString(", ")
	builder.WriteString("description=")
	builder.WriteString(t.Description)
	builder.WriteString(", ")
	builder.WriteString("tags=")
	builder.WriteString(fmt.Sprintf("%v", t.Tags))
	builder.WriteString(", ")
	builder.WriteString("timer=")
	builder.WriteString(t.Timer.Format(time.ANSIC))
	builder.WriteString(", ")
	builder.WriteString("image=")
	builder.WriteString(t.Image)
	builder.WriteString(", ")
	builder.WriteString("isDone=")
	builder.WriteString(fmt.Sprintf("%v", t.IsDone))
	builder.WriteByte(')')
	return builder.String()
}

// Tasks is a parsable slice of Task.
type Tasks []*Task
