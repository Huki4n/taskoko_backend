// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject/ent/attachment"
	"awesomeProject/ent/comment"
	"awesomeProject/ent/projectcolumn"
	"awesomeProject/ent/subtask"
	"awesomeProject/ent/task"
	"awesomeProject/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// TaskCreate is the builder for creating a Task entity.
type TaskCreate struct {
	config
	mutation *TaskMutation
	hooks    []Hook
}

// SetOrder sets the "order" field.
func (tc *TaskCreate) SetOrder(i int) *TaskCreate {
	tc.mutation.SetOrder(i)
	return tc
}

// SetType sets the "type" field.
func (tc *TaskCreate) SetType(s string) *TaskCreate {
	tc.mutation.SetType(s)
	return tc
}

// SetName sets the "name" field.
func (tc *TaskCreate) SetName(s string) *TaskCreate {
	tc.mutation.SetName(s)
	return tc
}

// SetDescription sets the "description" field.
func (tc *TaskCreate) SetDescription(s string) *TaskCreate {
	tc.mutation.SetDescription(s)
	return tc
}

// SetTags sets the "tags" field.
func (tc *TaskCreate) SetTags(s []string) *TaskCreate {
	tc.mutation.SetTags(s)
	return tc
}

// SetTimer sets the "timer" field.
func (tc *TaskCreate) SetTimer(t time.Time) *TaskCreate {
	tc.mutation.SetTimer(t)
	return tc
}

// SetNillableTimer sets the "timer" field if the given value is not nil.
func (tc *TaskCreate) SetNillableTimer(t *time.Time) *TaskCreate {
	if t != nil {
		tc.SetTimer(*t)
	}
	return tc
}

// SetImage sets the "image" field.
func (tc *TaskCreate) SetImage(s string) *TaskCreate {
	tc.mutation.SetImage(s)
	return tc
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (tc *TaskCreate) SetNillableImage(s *string) *TaskCreate {
	if s != nil {
		tc.SetImage(*s)
	}
	return tc
}

// SetIsDone sets the "isDone" field.
func (tc *TaskCreate) SetIsDone(b bool) *TaskCreate {
	tc.mutation.SetIsDone(b)
	return tc
}

// SetNillableIsDone sets the "isDone" field if the given value is not nil.
func (tc *TaskCreate) SetNillableIsDone(b *bool) *TaskCreate {
	if b != nil {
		tc.SetIsDone(*b)
	}
	return tc
}

// AddSubtaskIDs adds the "subtasks" edge to the Subtask entity by IDs.
func (tc *TaskCreate) AddSubtaskIDs(ids ...int) *TaskCreate {
	tc.mutation.AddSubtaskIDs(ids...)
	return tc
}

// AddSubtasks adds the "subtasks" edges to the Subtask entity.
func (tc *TaskCreate) AddSubtasks(s ...*Subtask) *TaskCreate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tc.AddSubtaskIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tc *TaskCreate) AddCommentIDs(ids ...int) *TaskCreate {
	tc.mutation.AddCommentIDs(ids...)
	return tc
}

// AddComments adds the "comments" edges to the Comment entity.
func (tc *TaskCreate) AddComments(c ...*Comment) *TaskCreate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tc.AddCommentIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (tc *TaskCreate) AddAttachmentIDs(ids ...int) *TaskCreate {
	tc.mutation.AddAttachmentIDs(ids...)
	return tc
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (tc *TaskCreate) AddAttachments(a ...*Attachment) *TaskCreate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tc.AddAttachmentIDs(ids...)
}

// SetColumnID sets the "column" edge to the ProjectColumn entity by ID.
func (tc *TaskCreate) SetColumnID(id int) *TaskCreate {
	tc.mutation.SetColumnID(id)
	return tc
}

// SetNillableColumnID sets the "column" edge to the ProjectColumn entity by ID if the given value is not nil.
func (tc *TaskCreate) SetNillableColumnID(id *int) *TaskCreate {
	if id != nil {
		tc = tc.SetColumnID(*id)
	}
	return tc
}

// SetColumn sets the "column" edge to the ProjectColumn entity.
func (tc *TaskCreate) SetColumn(p *ProjectColumn) *TaskCreate {
	return tc.SetColumnID(p.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tc *TaskCreate) AddUserIDs(ids ...int) *TaskCreate {
	tc.mutation.AddUserIDs(ids...)
	return tc
}

// AddUsers adds the "users" edges to the User entity.
func (tc *TaskCreate) AddUsers(u ...*User) *TaskCreate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tc.AddUserIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tc *TaskCreate) Mutation() *TaskMutation {
	return tc.mutation
}

// Save creates the Task in the database.
func (tc *TaskCreate) Save(ctx context.Context) (*Task, error) {
	tc.defaults()
	return withHooks(ctx, tc.sqlSave, tc.mutation, tc.hooks)
}

// SaveX calls Save and panics if Save returns an error.
func (tc *TaskCreate) SaveX(ctx context.Context) *Task {
	v, err := tc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tc *TaskCreate) Exec(ctx context.Context) error {
	_, err := tc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tc *TaskCreate) ExecX(ctx context.Context) {
	if err := tc.Exec(ctx); err != nil {
		panic(err)
	}
}

// defaults sets the default values of the builder before save.
func (tc *TaskCreate) defaults() {
	if _, ok := tc.mutation.Timer(); !ok {
		v := task.DefaultTimer()
		tc.mutation.SetTimer(v)
	}
	if _, ok := tc.mutation.IsDone(); !ok {
		v := task.DefaultIsDone
		tc.mutation.SetIsDone(v)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tc *TaskCreate) check() error {
	if _, ok := tc.mutation.Order(); !ok {
		return &ValidationError{Name: "order", err: errors.New(`ent: missing required field "Task.order"`)}
	}
	if _, ok := tc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "Task.type"`)}
	}
	if _, ok := tc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "Task.name"`)}
	}
	if v, ok := tc.mutation.Name(); ok {
		if err := task.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Task.name": %w`, err)}
		}
	}
	if _, ok := tc.mutation.Description(); !ok {
		return &ValidationError{Name: "description", err: errors.New(`ent: missing required field "Task.description"`)}
	}
	if _, ok := tc.mutation.Tags(); !ok {
		return &ValidationError{Name: "tags", err: errors.New(`ent: missing required field "Task.tags"`)}
	}
	if _, ok := tc.mutation.Timer(); !ok {
		return &ValidationError{Name: "timer", err: errors.New(`ent: missing required field "Task.timer"`)}
	}
	if _, ok := tc.mutation.IsDone(); !ok {
		return &ValidationError{Name: "isDone", err: errors.New(`ent: missing required field "Task.isDone"`)}
	}
	return nil
}

func (tc *TaskCreate) sqlSave(ctx context.Context) (*Task, error) {
	if err := tc.check(); err != nil {
		return nil, err
	}
	_node, _spec := tc.createSpec()
	if err := sqlgraph.CreateNode(ctx, tc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	id := _spec.ID.Value.(int64)
	_node.ID = int(id)
	tc.mutation.id = &_node.ID
	tc.mutation.done = true
	return _node, nil
}

func (tc *TaskCreate) createSpec() (*Task, *sqlgraph.CreateSpec) {
	var (
		_node = &Task{config: tc.config}
		_spec = sqlgraph.NewCreateSpec(task.Table, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	)
	if value, ok := tc.mutation.Order(); ok {
		_spec.SetField(task.FieldOrder, field.TypeInt, value)
		_node.Order = value
	}
	if value, ok := tc.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
		_node.Type = value
	}
	if value, ok := tc.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
		_node.Name = value
	}
	if value, ok := tc.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
		_node.Description = value
	}
	if value, ok := tc.mutation.Tags(); ok {
		_spec.SetField(task.FieldTags, field.TypeJSON, value)
		_node.Tags = value
	}
	if value, ok := tc.mutation.Timer(); ok {
		_spec.SetField(task.FieldTimer, field.TypeTime, value)
		_node.Timer = value
	}
	if value, ok := tc.mutation.Image(); ok {
		_spec.SetField(task.FieldImage, field.TypeString, value)
		_node.Image = value
	}
	if value, ok := tc.mutation.IsDone(); ok {
		_spec.SetField(task.FieldIsDone, field.TypeBool, value)
		_node.IsDone = value
	}
	if nodes := tc.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentsTable,
			Columns: []string{task.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.AttachmentsTable,
			Columns: []string{task.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.ColumnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ColumnTable,
			Columns: []string{task.ColumnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectcolumn.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_node.project_column_tasks = &nodes[0]
		_spec.Edges = append(_spec.Edges, edge)
	}
	if nodes := tc.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: task.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges = append(_spec.Edges, edge)
	}
	return _node, _spec
}

// TaskCreateBulk is the builder for creating many Task entities in bulk.
type TaskCreateBulk struct {
	config
	err      error
	builders []*TaskCreate
}

// Save creates the Task entities in the database.
func (tcb *TaskCreateBulk) Save(ctx context.Context) ([]*Task, error) {
	if tcb.err != nil {
		return nil, tcb.err
	}
	specs := make([]*sqlgraph.CreateSpec, len(tcb.builders))
	nodes := make([]*Task, len(tcb.builders))
	mutators := make([]Mutator, len(tcb.builders))
	for i := range tcb.builders {
		func(i int, root context.Context) {
			builder := tcb.builders[i]
			builder.defaults()
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*TaskMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				var err error
				nodes[i], specs[i] = builder.createSpec()
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, tcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, tcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{msg: err.Error(), wrap: err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				if specs[i].ID.Value != nil {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				mutation.done = true
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, tcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (tcb *TaskCreateBulk) SaveX(ctx context.Context) []*Task {
	v, err := tcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (tcb *TaskCreateBulk) Exec(ctx context.Context) error {
	_, err := tcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tcb *TaskCreateBulk) ExecX(ctx context.Context) {
	if err := tcb.Exec(ctx); err != nil {
		panic(err)
	}
}
