// Code generated by ent, DO NOT EDIT.

package ent

import (
	"awesomeProject/ent/attachment"
	"awesomeProject/ent/comment"
	"awesomeProject/ent/predicate"
	"awesomeProject/ent/projectcolumn"
	"awesomeProject/ent/subtask"
	"awesomeProject/ent/task"
	"awesomeProject/ent/user"
	"context"
	"errors"
	"fmt"
	"time"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/dialect/sql/sqljson"
	"entgo.io/ent/schema/field"
)

// TaskUpdate is the builder for updating Task entities.
type TaskUpdate struct {
	config
	hooks    []Hook
	mutation *TaskMutation
}

// Where appends a list predicates to the TaskUpdate builder.
func (tu *TaskUpdate) Where(ps ...predicate.Task) *TaskUpdate {
	tu.mutation.Where(ps...)
	return tu
}

// SetOrder sets the "order" field.
func (tu *TaskUpdate) SetOrder(i int) *TaskUpdate {
	tu.mutation.ResetOrder()
	tu.mutation.SetOrder(i)
	return tu
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableOrder(i *int) *TaskUpdate {
	if i != nil {
		tu.SetOrder(*i)
	}
	return tu
}

// AddOrder adds i to the "order" field.
func (tu *TaskUpdate) AddOrder(i int) *TaskUpdate {
	tu.mutation.AddOrder(i)
	return tu
}

// SetType sets the "type" field.
func (tu *TaskUpdate) SetType(s string) *TaskUpdate {
	tu.mutation.SetType(s)
	return tu
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableType(s *string) *TaskUpdate {
	if s != nil {
		tu.SetType(*s)
	}
	return tu
}

// SetName sets the "name" field.
func (tu *TaskUpdate) SetName(s string) *TaskUpdate {
	tu.mutation.SetName(s)
	return tu
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableName(s *string) *TaskUpdate {
	if s != nil {
		tu.SetName(*s)
	}
	return tu
}

// SetDescription sets the "description" field.
func (tu *TaskUpdate) SetDescription(s string) *TaskUpdate {
	tu.mutation.SetDescription(s)
	return tu
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableDescription(s *string) *TaskUpdate {
	if s != nil {
		tu.SetDescription(*s)
	}
	return tu
}

// SetTags sets the "tags" field.
func (tu *TaskUpdate) SetTags(s []string) *TaskUpdate {
	tu.mutation.SetTags(s)
	return tu
}

// AppendTags appends s to the "tags" field.
func (tu *TaskUpdate) AppendTags(s []string) *TaskUpdate {
	tu.mutation.AppendTags(s)
	return tu
}

// SetTimer sets the "timer" field.
func (tu *TaskUpdate) SetTimer(t time.Time) *TaskUpdate {
	tu.mutation.SetTimer(t)
	return tu
}

// SetNillableTimer sets the "timer" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableTimer(t *time.Time) *TaskUpdate {
	if t != nil {
		tu.SetTimer(*t)
	}
	return tu
}

// SetImage sets the "image" field.
func (tu *TaskUpdate) SetImage(s string) *TaskUpdate {
	tu.mutation.SetImage(s)
	return tu
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableImage(s *string) *TaskUpdate {
	if s != nil {
		tu.SetImage(*s)
	}
	return tu
}

// ClearImage clears the value of the "image" field.
func (tu *TaskUpdate) ClearImage() *TaskUpdate {
	tu.mutation.ClearImage()
	return tu
}

// SetIsDone sets the "isDone" field.
func (tu *TaskUpdate) SetIsDone(b bool) *TaskUpdate {
	tu.mutation.SetIsDone(b)
	return tu
}

// SetNillableIsDone sets the "isDone" field if the given value is not nil.
func (tu *TaskUpdate) SetNillableIsDone(b *bool) *TaskUpdate {
	if b != nil {
		tu.SetIsDone(*b)
	}
	return tu
}

// AddSubtaskIDs adds the "subtasks" edge to the Subtask entity by IDs.
func (tu *TaskUpdate) AddSubtaskIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddSubtaskIDs(ids...)
	return tu
}

// AddSubtasks adds the "subtasks" edges to the Subtask entity.
func (tu *TaskUpdate) AddSubtasks(s ...*Subtask) *TaskUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.AddSubtaskIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tu *TaskUpdate) AddCommentIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddCommentIDs(ids...)
	return tu
}

// AddComments adds the "comments" edges to the Comment entity.
func (tu *TaskUpdate) AddComments(c ...*Comment) *TaskUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.AddCommentIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (tu *TaskUpdate) AddAttachmentIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddAttachmentIDs(ids...)
	return tu
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (tu *TaskUpdate) AddAttachments(a ...*Attachment) *TaskUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.AddAttachmentIDs(ids...)
}

// SetColumnID sets the "column" edge to the ProjectColumn entity by ID.
func (tu *TaskUpdate) SetColumnID(id int) *TaskUpdate {
	tu.mutation.SetColumnID(id)
	return tu
}

// SetNillableColumnID sets the "column" edge to the ProjectColumn entity by ID if the given value is not nil.
func (tu *TaskUpdate) SetNillableColumnID(id *int) *TaskUpdate {
	if id != nil {
		tu = tu.SetColumnID(*id)
	}
	return tu
}

// SetColumn sets the "column" edge to the ProjectColumn entity.
func (tu *TaskUpdate) SetColumn(p *ProjectColumn) *TaskUpdate {
	return tu.SetColumnID(p.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tu *TaskUpdate) AddUserIDs(ids ...int) *TaskUpdate {
	tu.mutation.AddUserIDs(ids...)
	return tu
}

// AddUsers adds the "users" edges to the User entity.
func (tu *TaskUpdate) AddUsers(u ...*User) *TaskUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.AddUserIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tu *TaskUpdate) Mutation() *TaskMutation {
	return tu.mutation
}

// ClearSubtasks clears all "subtasks" edges to the Subtask entity.
func (tu *TaskUpdate) ClearSubtasks() *TaskUpdate {
	tu.mutation.ClearSubtasks()
	return tu
}

// RemoveSubtaskIDs removes the "subtasks" edge to Subtask entities by IDs.
func (tu *TaskUpdate) RemoveSubtaskIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveSubtaskIDs(ids...)
	return tu
}

// RemoveSubtasks removes "subtasks" edges to Subtask entities.
func (tu *TaskUpdate) RemoveSubtasks(s ...*Subtask) *TaskUpdate {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tu.RemoveSubtaskIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (tu *TaskUpdate) ClearComments() *TaskUpdate {
	tu.mutation.ClearComments()
	return tu
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (tu *TaskUpdate) RemoveCommentIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveCommentIDs(ids...)
	return tu
}

// RemoveComments removes "comments" edges to Comment entities.
func (tu *TaskUpdate) RemoveComments(c ...*Comment) *TaskUpdate {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tu.RemoveCommentIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the Attachment entity.
func (tu *TaskUpdate) ClearAttachments() *TaskUpdate {
	tu.mutation.ClearAttachments()
	return tu
}

// RemoveAttachmentIDs removes the "attachments" edge to Attachment entities by IDs.
func (tu *TaskUpdate) RemoveAttachmentIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveAttachmentIDs(ids...)
	return tu
}

// RemoveAttachments removes "attachments" edges to Attachment entities.
func (tu *TaskUpdate) RemoveAttachments(a ...*Attachment) *TaskUpdate {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tu.RemoveAttachmentIDs(ids...)
}

// ClearColumn clears the "column" edge to the ProjectColumn entity.
func (tu *TaskUpdate) ClearColumn() *TaskUpdate {
	tu.mutation.ClearColumn()
	return tu
}

// ClearUsers clears all "users" edges to the User entity.
func (tu *TaskUpdate) ClearUsers() *TaskUpdate {
	tu.mutation.ClearUsers()
	return tu
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tu *TaskUpdate) RemoveUserIDs(ids ...int) *TaskUpdate {
	tu.mutation.RemoveUserIDs(ids...)
	return tu
}

// RemoveUsers removes "users" edges to User entities.
func (tu *TaskUpdate) RemoveUsers(u ...*User) *TaskUpdate {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tu.RemoveUserIDs(ids...)
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (tu *TaskUpdate) Save(ctx context.Context) (int, error) {
	return withHooks(ctx, tu.sqlSave, tu.mutation, tu.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tu *TaskUpdate) SaveX(ctx context.Context) int {
	affected, err := tu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (tu *TaskUpdate) Exec(ctx context.Context) error {
	_, err := tu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tu *TaskUpdate) ExecX(ctx context.Context) {
	if err := tu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tu *TaskUpdate) check() error {
	if v, ok := tu.mutation.Name(); ok {
		if err := task.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Task.name": %w`, err)}
		}
	}
	return nil
}

func (tu *TaskUpdate) sqlSave(ctx context.Context) (n int, err error) {
	if err := tu.check(); err != nil {
		return n, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	if ps := tu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tu.mutation.Order(); ok {
		_spec.SetField(task.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tu.mutation.AddedOrder(); ok {
		_spec.AddField(task.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tu.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
	}
	if value, ok := tu.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tu.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tu.mutation.Tags(); ok {
		_spec.SetField(task.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tu.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldTags, value)
		})
	}
	if value, ok := tu.mutation.Timer(); ok {
		_spec.SetField(task.FieldTimer, field.TypeTime, value)
	}
	if value, ok := tu.mutation.Image(); ok {
		_spec.SetField(task.FieldImage, field.TypeString, value)
	}
	if tu.mutation.ImageCleared() {
		_spec.ClearField(task.FieldImage, field.TypeString)
	}
	if value, ok := tu.mutation.IsDone(); ok {
		_spec.SetField(task.FieldIsDone, field.TypeBool, value)
	}
	if tu.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedSubtasksIDs(); len(nodes) > 0 && !tu.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentsTable,
			Columns: []string{task.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tu.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentsTable,
			Columns: []string{task.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentsTable,
			Columns: []string{task.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.AttachmentsTable,
			Columns: []string{task.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !tu.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.AttachmentsTable,
			Columns: []string{task.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.AttachmentsTable,
			Columns: []string{task.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.ColumnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ColumnTable,
			Columns: []string{task.ColumnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectcolumn.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.ColumnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ColumnTable,
			Columns: []string{task.ColumnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectcolumn.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: task.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tu.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: task.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tu.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: task.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if n, err = sqlgraph.UpdateNodes(ctx, tu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return 0, err
	}
	tu.mutation.done = true
	return n, nil
}

// TaskUpdateOne is the builder for updating a single Task entity.
type TaskUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *TaskMutation
}

// SetOrder sets the "order" field.
func (tuo *TaskUpdateOne) SetOrder(i int) *TaskUpdateOne {
	tuo.mutation.ResetOrder()
	tuo.mutation.SetOrder(i)
	return tuo
}

// SetNillableOrder sets the "order" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableOrder(i *int) *TaskUpdateOne {
	if i != nil {
		tuo.SetOrder(*i)
	}
	return tuo
}

// AddOrder adds i to the "order" field.
func (tuo *TaskUpdateOne) AddOrder(i int) *TaskUpdateOne {
	tuo.mutation.AddOrder(i)
	return tuo
}

// SetType sets the "type" field.
func (tuo *TaskUpdateOne) SetType(s string) *TaskUpdateOne {
	tuo.mutation.SetType(s)
	return tuo
}

// SetNillableType sets the "type" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableType(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetType(*s)
	}
	return tuo
}

// SetName sets the "name" field.
func (tuo *TaskUpdateOne) SetName(s string) *TaskUpdateOne {
	tuo.mutation.SetName(s)
	return tuo
}

// SetNillableName sets the "name" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableName(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetName(*s)
	}
	return tuo
}

// SetDescription sets the "description" field.
func (tuo *TaskUpdateOne) SetDescription(s string) *TaskUpdateOne {
	tuo.mutation.SetDescription(s)
	return tuo
}

// SetNillableDescription sets the "description" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableDescription(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetDescription(*s)
	}
	return tuo
}

// SetTags sets the "tags" field.
func (tuo *TaskUpdateOne) SetTags(s []string) *TaskUpdateOne {
	tuo.mutation.SetTags(s)
	return tuo
}

// AppendTags appends s to the "tags" field.
func (tuo *TaskUpdateOne) AppendTags(s []string) *TaskUpdateOne {
	tuo.mutation.AppendTags(s)
	return tuo
}

// SetTimer sets the "timer" field.
func (tuo *TaskUpdateOne) SetTimer(t time.Time) *TaskUpdateOne {
	tuo.mutation.SetTimer(t)
	return tuo
}

// SetNillableTimer sets the "timer" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableTimer(t *time.Time) *TaskUpdateOne {
	if t != nil {
		tuo.SetTimer(*t)
	}
	return tuo
}

// SetImage sets the "image" field.
func (tuo *TaskUpdateOne) SetImage(s string) *TaskUpdateOne {
	tuo.mutation.SetImage(s)
	return tuo
}

// SetNillableImage sets the "image" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableImage(s *string) *TaskUpdateOne {
	if s != nil {
		tuo.SetImage(*s)
	}
	return tuo
}

// ClearImage clears the value of the "image" field.
func (tuo *TaskUpdateOne) ClearImage() *TaskUpdateOne {
	tuo.mutation.ClearImage()
	return tuo
}

// SetIsDone sets the "isDone" field.
func (tuo *TaskUpdateOne) SetIsDone(b bool) *TaskUpdateOne {
	tuo.mutation.SetIsDone(b)
	return tuo
}

// SetNillableIsDone sets the "isDone" field if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableIsDone(b *bool) *TaskUpdateOne {
	if b != nil {
		tuo.SetIsDone(*b)
	}
	return tuo
}

// AddSubtaskIDs adds the "subtasks" edge to the Subtask entity by IDs.
func (tuo *TaskUpdateOne) AddSubtaskIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddSubtaskIDs(ids...)
	return tuo
}

// AddSubtasks adds the "subtasks" edges to the Subtask entity.
func (tuo *TaskUpdateOne) AddSubtasks(s ...*Subtask) *TaskUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.AddSubtaskIDs(ids...)
}

// AddCommentIDs adds the "comments" edge to the Comment entity by IDs.
func (tuo *TaskUpdateOne) AddCommentIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddCommentIDs(ids...)
	return tuo
}

// AddComments adds the "comments" edges to the Comment entity.
func (tuo *TaskUpdateOne) AddComments(c ...*Comment) *TaskUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.AddCommentIDs(ids...)
}

// AddAttachmentIDs adds the "attachments" edge to the Attachment entity by IDs.
func (tuo *TaskUpdateOne) AddAttachmentIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddAttachmentIDs(ids...)
	return tuo
}

// AddAttachments adds the "attachments" edges to the Attachment entity.
func (tuo *TaskUpdateOne) AddAttachments(a ...*Attachment) *TaskUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.AddAttachmentIDs(ids...)
}

// SetColumnID sets the "column" edge to the ProjectColumn entity by ID.
func (tuo *TaskUpdateOne) SetColumnID(id int) *TaskUpdateOne {
	tuo.mutation.SetColumnID(id)
	return tuo
}

// SetNillableColumnID sets the "column" edge to the ProjectColumn entity by ID if the given value is not nil.
func (tuo *TaskUpdateOne) SetNillableColumnID(id *int) *TaskUpdateOne {
	if id != nil {
		tuo = tuo.SetColumnID(*id)
	}
	return tuo
}

// SetColumn sets the "column" edge to the ProjectColumn entity.
func (tuo *TaskUpdateOne) SetColumn(p *ProjectColumn) *TaskUpdateOne {
	return tuo.SetColumnID(p.ID)
}

// AddUserIDs adds the "users" edge to the User entity by IDs.
func (tuo *TaskUpdateOne) AddUserIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.AddUserIDs(ids...)
	return tuo
}

// AddUsers adds the "users" edges to the User entity.
func (tuo *TaskUpdateOne) AddUsers(u ...*User) *TaskUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.AddUserIDs(ids...)
}

// Mutation returns the TaskMutation object of the builder.
func (tuo *TaskUpdateOne) Mutation() *TaskMutation {
	return tuo.mutation
}

// ClearSubtasks clears all "subtasks" edges to the Subtask entity.
func (tuo *TaskUpdateOne) ClearSubtasks() *TaskUpdateOne {
	tuo.mutation.ClearSubtasks()
	return tuo
}

// RemoveSubtaskIDs removes the "subtasks" edge to Subtask entities by IDs.
func (tuo *TaskUpdateOne) RemoveSubtaskIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveSubtaskIDs(ids...)
	return tuo
}

// RemoveSubtasks removes "subtasks" edges to Subtask entities.
func (tuo *TaskUpdateOne) RemoveSubtasks(s ...*Subtask) *TaskUpdateOne {
	ids := make([]int, len(s))
	for i := range s {
		ids[i] = s[i].ID
	}
	return tuo.RemoveSubtaskIDs(ids...)
}

// ClearComments clears all "comments" edges to the Comment entity.
func (tuo *TaskUpdateOne) ClearComments() *TaskUpdateOne {
	tuo.mutation.ClearComments()
	return tuo
}

// RemoveCommentIDs removes the "comments" edge to Comment entities by IDs.
func (tuo *TaskUpdateOne) RemoveCommentIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveCommentIDs(ids...)
	return tuo
}

// RemoveComments removes "comments" edges to Comment entities.
func (tuo *TaskUpdateOne) RemoveComments(c ...*Comment) *TaskUpdateOne {
	ids := make([]int, len(c))
	for i := range c {
		ids[i] = c[i].ID
	}
	return tuo.RemoveCommentIDs(ids...)
}

// ClearAttachments clears all "attachments" edges to the Attachment entity.
func (tuo *TaskUpdateOne) ClearAttachments() *TaskUpdateOne {
	tuo.mutation.ClearAttachments()
	return tuo
}

// RemoveAttachmentIDs removes the "attachments" edge to Attachment entities by IDs.
func (tuo *TaskUpdateOne) RemoveAttachmentIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveAttachmentIDs(ids...)
	return tuo
}

// RemoveAttachments removes "attachments" edges to Attachment entities.
func (tuo *TaskUpdateOne) RemoveAttachments(a ...*Attachment) *TaskUpdateOne {
	ids := make([]int, len(a))
	for i := range a {
		ids[i] = a[i].ID
	}
	return tuo.RemoveAttachmentIDs(ids...)
}

// ClearColumn clears the "column" edge to the ProjectColumn entity.
func (tuo *TaskUpdateOne) ClearColumn() *TaskUpdateOne {
	tuo.mutation.ClearColumn()
	return tuo
}

// ClearUsers clears all "users" edges to the User entity.
func (tuo *TaskUpdateOne) ClearUsers() *TaskUpdateOne {
	tuo.mutation.ClearUsers()
	return tuo
}

// RemoveUserIDs removes the "users" edge to User entities by IDs.
func (tuo *TaskUpdateOne) RemoveUserIDs(ids ...int) *TaskUpdateOne {
	tuo.mutation.RemoveUserIDs(ids...)
	return tuo
}

// RemoveUsers removes "users" edges to User entities.
func (tuo *TaskUpdateOne) RemoveUsers(u ...*User) *TaskUpdateOne {
	ids := make([]int, len(u))
	for i := range u {
		ids[i] = u[i].ID
	}
	return tuo.RemoveUserIDs(ids...)
}

// Where appends a list predicates to the TaskUpdate builder.
func (tuo *TaskUpdateOne) Where(ps ...predicate.Task) *TaskUpdateOne {
	tuo.mutation.Where(ps...)
	return tuo
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (tuo *TaskUpdateOne) Select(field string, fields ...string) *TaskUpdateOne {
	tuo.fields = append([]string{field}, fields...)
	return tuo
}

// Save executes the query and returns the updated Task entity.
func (tuo *TaskUpdateOne) Save(ctx context.Context) (*Task, error) {
	return withHooks(ctx, tuo.sqlSave, tuo.mutation, tuo.hooks)
}

// SaveX is like Save, but panics if an error occurs.
func (tuo *TaskUpdateOne) SaveX(ctx context.Context) *Task {
	node, err := tuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (tuo *TaskUpdateOne) Exec(ctx context.Context) error {
	_, err := tuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (tuo *TaskUpdateOne) ExecX(ctx context.Context) {
	if err := tuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (tuo *TaskUpdateOne) check() error {
	if v, ok := tuo.mutation.Name(); ok {
		if err := task.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "Task.name": %w`, err)}
		}
	}
	return nil
}

func (tuo *TaskUpdateOne) sqlSave(ctx context.Context) (_node *Task, err error) {
	if err := tuo.check(); err != nil {
		return _node, err
	}
	_spec := sqlgraph.NewUpdateSpec(task.Table, task.Columns, sqlgraph.NewFieldSpec(task.FieldID, field.TypeInt))
	id, ok := tuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "id", err: errors.New(`ent: missing "Task.id" for update`)}
	}
	_spec.Node.ID.Value = id
	if fields := tuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, task.FieldID)
		for _, f := range fields {
			if !task.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != task.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := tuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := tuo.mutation.Order(); ok {
		_spec.SetField(task.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.AddedOrder(); ok {
		_spec.AddField(task.FieldOrder, field.TypeInt, value)
	}
	if value, ok := tuo.mutation.GetType(); ok {
		_spec.SetField(task.FieldType, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Name(); ok {
		_spec.SetField(task.FieldName, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Description(); ok {
		_spec.SetField(task.FieldDescription, field.TypeString, value)
	}
	if value, ok := tuo.mutation.Tags(); ok {
		_spec.SetField(task.FieldTags, field.TypeJSON, value)
	}
	if value, ok := tuo.mutation.AppendedTags(); ok {
		_spec.AddModifier(func(u *sql.UpdateBuilder) {
			sqljson.Append(u, task.FieldTags, value)
		})
	}
	if value, ok := tuo.mutation.Timer(); ok {
		_spec.SetField(task.FieldTimer, field.TypeTime, value)
	}
	if value, ok := tuo.mutation.Image(); ok {
		_spec.SetField(task.FieldImage, field.TypeString, value)
	}
	if tuo.mutation.ImageCleared() {
		_spec.ClearField(task.FieldImage, field.TypeString)
	}
	if value, ok := tuo.mutation.IsDone(); ok {
		_spec.SetField(task.FieldIsDone, field.TypeBool, value)
	}
	if tuo.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedSubtasksIDs(); len(nodes) > 0 && !tuo.mutation.SubtasksCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.SubtasksIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.SubtasksTable,
			Columns: []string{task.SubtasksColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(subtask.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentsTable,
			Columns: []string{task.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedCommentsIDs(); len(nodes) > 0 && !tuo.mutation.CommentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentsTable,
			Columns: []string{task.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.CommentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.CommentsTable,
			Columns: []string{task.CommentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(comment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.AttachmentsTable,
			Columns: []string{task.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedAttachmentsIDs(); len(nodes) > 0 && !tuo.mutation.AttachmentsCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.AttachmentsTable,
			Columns: []string{task.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.AttachmentsIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.O2M,
			Inverse: false,
			Table:   task.AttachmentsTable,
			Columns: []string{task.AttachmentsColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(attachment.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.ColumnCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ColumnTable,
			Columns: []string{task.ColumnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectcolumn.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.ColumnIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2O,
			Inverse: true,
			Table:   task.ColumnTable,
			Columns: []string{task.ColumnColumn},
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(projectcolumn.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	if tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: task.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.RemovedUsersIDs(); len(nodes) > 0 && !tuo.mutation.UsersCleared() {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: task.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Clear = append(_spec.Edges.Clear, edge)
	}
	if nodes := tuo.mutation.UsersIDs(); len(nodes) > 0 {
		edge := &sqlgraph.EdgeSpec{
			Rel:     sqlgraph.M2M,
			Inverse: true,
			Table:   task.UsersTable,
			Columns: task.UsersPrimaryKey,
			Bidi:    false,
			Target: &sqlgraph.EdgeTarget{
				IDSpec: sqlgraph.NewFieldSpec(user.FieldID, field.TypeInt),
			},
		}
		for _, k := range nodes {
			edge.Target.Nodes = append(edge.Target.Nodes, k)
		}
		_spec.Edges.Add = append(_spec.Edges.Add, edge)
	}
	_node = &Task{config: tuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, tuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{task.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{msg: err.Error(), wrap: err}
		}
		return nil, err
	}
	tuo.mutation.done = true
	return _node, nil
}
